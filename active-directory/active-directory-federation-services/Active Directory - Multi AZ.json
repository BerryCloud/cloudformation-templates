{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"(0001) - This template creates a VPC infrastructure for a multi-AZ, multi-tier deployment of a Windows based Application infrstructure. It installs 2 Active Directory Domain Controllers into subnets in seperate AZs inside a VPC",
   "Parameters":{
      "KeyPairName":{
         "Description":"Public/private key pairs allow you to securely connect to your instance after it launches",
         "Type":"String"
      },
      "InstanceType":{
         "Description":"Amazon EC2 instance type",
         "Type":"String",
         "Default":"t2.small",
         "AllowedValues":[
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge"
         ]
      },
      "DomainDNSName":{
         "Description":"Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
         "Type":"String",
         "Default":"internal.example.com",
         "MinLength":"2",
         "MaxLength":"63",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
      "DomainNetBIOSName":{
         "Description":"NetBIOS name of the domain (upto 15 characters) for users of earlier versions of Windows e.g. EXAMPLE",
         "Type":"String",
         "Default":"internal",
         "MinLength":"1",
         "MaxLength":"15",
         "AllowedPattern":"[a-zA-Z0-9]+"
      },
      "ADServerNetBIOSName1":{
         "Description":"NetBIOS name of the 1st AD Server (upto 15 characters)",
         "Type":"String",
         "Default":"DC1",
         "MinLength":"1",
         "MaxLength":"15",
         "AllowedPattern":"[a-zA-Z0-9]+"
      },
      "ADServerNetBIOSName2":{
         "Description":"NetBIOS name of the 2nd AD Server (upto 15 characters)",
         "Type":"String",
         "Default":"DC2",
         "MinLength":"1",
         "MaxLength":"15",
         "AllowedPattern":"[a-zA-Z0-9]+"
      },
      "RestoreModePassword":{
         "Description":"Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
         "Type":"String",
         "MinLength":"8",
         "MaxLength":"32",
         "AllowedPattern":"(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
         "NoEcho":"True",
         "Default":"Password123"
      },
      "DomainAdminUser":{
         "Description":"User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
         "Type":"String",
         "Default":"StackAdmin",
         "MinLength":"5",
         "MaxLength":"25",
         "AllowedPattern":"[a-zA-Z0-9]*"
      },
      "DomainAdminPassword":{
         "Description":"Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
         "Type":"String",
         "MinLength":"8",
         "MaxLength":"32",
         "AllowedPattern":"(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
         "NoEcho":"true",
         "Default":"Password123"
      },
      "PublicSubnet1CIDR":{
         "Description":"CIDR Block for the Public Subnet located in AZ1",
         "Type":"String",
         "Default":"10.0.0.0/24",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
      "PublicSubnet2CIDR":{
         "Description":"CIDR Block for the Public Subnet located in AZ2",
         "Type":"String",
         "Default":"10.0.1.0/24",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
      "PrivateSubnet1CIDR":{
         "Description":"CIDR Block for Private Subnet 1 located in AZ1",
         "Type":"String",
         "Default":"10.0.2.0/24",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
      "PrivateSubnet2CIDR":{
         "Description":"CIDR Block for Private Subnet 2 located in AZ2",
         "Type":"String",
         "Default":"10.0.3.0/24",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
      "VPCCIDR":{
         "Description":"CIDR Block for the VPC",
         "Type":"String",
         "Default":"10.0.0.0/16",
         "AllowedPattern":"[a-zA-Z0-9]+\\..+"
      },
      "DomainController1PrivateIp":{
         "Description":"Fixed private IP for the first Active Directory server located in AZ1",
         "Type":"String",
         "Default":"10.0.2.10"
      },
      "DomainController2PrivateIp":{
         "Description":"Fixed private IP for the second Active Directory server located in AZ2",
         "Type":"String",
         "Default":"10.0.3.10"
      },
      "ADFS1PrivateIp":{
         "Description":"Fixed private IP for the first Active Directory Federated server located in AZ1",
         "Type":"String",
         "Default":"10.0.2.11"
      },
      "ADFS2PrivateIp":{
         "Description":"Fixed private IP for the second Active Directory Federated server located in AZ2",
         "Type":"String",
         "Default":"10.0.3.11"
      },
      "SyncPrivateIp":{
         "Description":"Fixed private IP for the DirSync server located in AZ2",
         "Type":"String",
         "Default":"10.0.3.12"
      }
   },
   "Mappings":{
      "InstanceArchitecture":{
         "t2.micro":{
            "Arch":"64"
         },
         "t2.small":{
            "Arch":"64"
         },
         "t2.medium":{
            "Arch":"64"
         },
         "m3.medium":{
            "Arch":"64"
         },
         "m3.large":{
            "Arch":"64"
         },
         "m3.xlarge":{
            "Arch":"64"
         },
         "m3.2xlarge":{
            "Arch":"64"
         }
      },
      "WindowsAMI":{
         "us-east-1":{
            "64":"ami-ba13abd2"
         },
         "us-west-2":{
            "64":"ami-21f0bc11"
         },
         "us-west-1":{
            "64":"ami-df43569a"
         },
         "eu-west-1":{
            "64":"ami-d4228ea3"
         }
      },
      "LinuxAMI":{
         "us-east-1":{
            "64":"ami-4c9e4b24"
         },
         "us-west-2":{
            "64":"ami-bb69128b"
         },
         "us-west-1":{
            "64":"ami-2b2b296e"
         },
         "eu-west-1":{
            "64":"ami-3760b040"
         }
      }
   },
   "Resources":{
      "DhcpOptions":{
         "Type":"AWS::EC2::DHCPOptions",
         "Properties":{
            "DomainName":{
               "Ref":"DomainDNSName"
            },
            "DomainNameServers":[
               "AmazonProvidedDNS"
            ],
            "NtpServers":[
               {
                  "Ref":"DomainController1PrivateIp"
               },
               {
                  "Ref":"DomainController2PrivateIp"
               }
            ],
            "NetbiosNameServers":[
               {
                  "Ref":"DomainController1PrivateIp"
               },
               {
                  "Ref":"DomainController2PrivateIp"
               }
            ],
            "NetbiosNodeType":"2",
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Domain",
                  "Value":{
                     "Ref":"DomainDNSName"
                  }
               }
            ]
         }
      },
      "VPC":{
         "Type":"AWS::EC2::VPC",
         "Properties":{
            "CidrBlock":{
               "Ref":"VPCCIDR"
            },
            "EnableDnsSupport":true,
            "EnableDnsHostnames":true,
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               }
            ]
         }
      },
      "VPCDHCPOptionsAssociation":{
         "Type":"AWS::EC2::VPCDHCPOptionsAssociation",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "DhcpOptionsId":{
               "Ref":"DhcpOptions"
            }
         }
      },
      "PublicSubnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PublicSubnet1CIDR"
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  0,
                  {
                     "Fn::GetAZs":""
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Public subnet"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               },
               {
                  "Key":"Role",
                  "Value":"Public 1 Subnet"
               }
            ]
         }
      },
      "PublicSubnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PublicSubnet2CIDR"
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  1,
                  {
                     "Fn::GetAZs":""
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Public subnet"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               },
               {
                  "Key":"Role",
                  "Value":"Public 2 Subnet"
               }
            ]
         }
      },
      "PrivateSubnet1":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PrivateSubnet1CIDR"
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  0,
                  {
                     "Fn::GetAZs":""
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Private subnet"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Private"
               },
               {
                  "Key":"Role",
                  "Value":"DomainController1 Subnet"
               }
            ]
         }
      },
      "PrivateSubnet2":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PrivateSubnet2CIDR"
            },
            "AvailabilityZone":{
               "Fn::Select":[
                  1,
                  {
                     "Fn::GetAZs":""
                  }
               ]
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Private subnet"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Private"
               },
               {
                  "Key":"Role",
                  "Value":"DomainController2 Subnet"
               }
            ]
         }
      },
      "InternetGateway":{
         "Type":"AWS::EC2::InternetGateway",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               }
            ]
         }
      },
      "AttachGateway":{
         "Type":"AWS::EC2::VPCGatewayAttachment",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "InternetGatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "PublicRouteTable":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Public Route Table"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"Public"
               }
            ]
         }
      },
      "PublicRoute":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "GatewayId":{
               "Ref":"InternetGateway"
            }
         }
      },
      "PublicSubnet1RouteTableAssociation":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet1"
            },
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            }
         }
      },
      "PublicSubnet2RouteTableAssociation":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PublicSubnet2"
            },
            "RouteTableId":{
               "Ref":"PublicRouteTable"
            }
         }
      },
      "PrivateRouteTable1":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Private Route Table AZ1"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"AZ1 Private"
               }
            ]
         }
      },
      "PrivateRouteTable2":{
         "Type":"AWS::EC2::RouteTable",
         "Properties":{
            "VpcId":{
               "Ref":"VPC"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Private Route Table AZ2"
               },
               {
                  "Key":"Application",
                  "Value":{
                     "Ref":"AWS::StackName"
                  }
               },
               {
                  "Key":"Network",
                  "Value":"AZ1 Private"
               }
            ]
         }
      },      
      "PrivateRoute1":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"PrivateRouteTable1"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "InstanceId":{
               "Ref":"NAT1"
            }
         }
      },
      "PrivateRoute2":{
         "Type":"AWS::EC2::Route",
         "Properties":{
            "RouteTableId":{
               "Ref":"PrivateRouteTable2"
            },
            "DestinationCidrBlock":"0.0.0.0/0",
            "InstanceId":{
               "Ref":"NAT2"
            }
         }
      },      
      "PrivateSubnetRouteTableAssociation1":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PrivateSubnet1"
            },
            "RouteTableId":{
               "Ref":"PrivateRouteTable1"
            }
         }
      },
      "PrivateSubnetRouteTableAssociation2":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "SubnetId":{
               "Ref":"PrivateSubnet2"
            },
            "RouteTableId":{
               "Ref":"PrivateRouteTable2"
            }
         }
      },
      "WAP1EIP":{
         "Type":"AWS::EC2::EIP",
         "Properties":{
            "Domain":"vpc",
            "InstanceId":{
               "Ref":"WAP1"
            }
         }
      },
      "WAP2EIP":{
         "Type":"AWS::EC2::EIP",
         "Properties":{
            "Domain":"vpc",
            "InstanceId":{
               "Ref":"WAP2"
            }
         }
      },
      "Sync":{
         "Type":"AWS::EC2::Instance",
         "DependsOn":"DomainController2WaitCondition",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "join",
                     "dirsync"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.Sync.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r Sync",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "1-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName Sync -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "join":{
                  "commands":{
                     "a-set-dns-servers":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     },
                     "b-join-domain":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Add-Computer -DomainName ",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " -Credential ",
                                 "(New-Object System.Management.Automation.PSCredential('",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 "\\",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "',",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force))) ",
                                 "-Restart\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "dirsync":{
                  "commands":{
                     "a-install-net-framework":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-WindowsFeature -name NET-Framework-Core\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               }
            }
         },         
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "SubnetId":{
               "Ref":"PrivateSubnet2"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Sync"
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"40",
                     "VolumeType":"standard"
                  }
               }
            ],
            "SecurityGroupIds":[
               {
                  "Ref":"DomainMemberSecurityGroup"
               }
            ],
            "PrivateIpAddress":{
               "Ref":"SyncPrivateIp"
            },            
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r Sync",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }
         }
      },
      "NAT1":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "LinuxAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"NAT1"
               }
            ],
            "NetworkInterfaces":[
               {
                  "GroupSet":[
                     {
                        "Ref":"NATSecurityGroup"
                     }
                  ],
                  "AssociatePublicIpAddress":"true",
                  "DeviceIndex":"0",
                  "DeleteOnTermination":"true",
                  "SubnetId":{
                     "Ref":"PublicSubnet1"
                  }
               }
            ],
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "SourceDestCheck":"false"
         }
      },
      "NAT2":{
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "LinuxAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"NAT2"
               }
            ],
            "NetworkInterfaces":[
               {
                  "GroupSet":[
                     {
                        "Ref":"NATSecurityGroup"
                     }
                  ],
                  "AssociatePublicIpAddress":"true",
                  "DeviceIndex":"0",
                  "DeleteOnTermination":"true",
                  "SubnetId":{
                     "Ref":"PublicSubnet2"
                  }
               }
            ],
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "SourceDestCheck":"false"
         }
      },
      "DomainController1":{
         "Type":"AWS::EC2::Instance",
         "DependsOn":"NAT1",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "installADDS",
                     "configureSites",
                     "finalize"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.DomainController1.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r DomainController1",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\scripts\\Set-StaticIP.ps1":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "$netip = Get-NetIPConfiguration;",
                                 "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                 "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                 "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\scripts\\New-LabADUser.ps1":{
                        "source":"https://s3.amazonaws.com/CFN_WS2012_Scripts/AD/New-LabADUser.ps1"
                     },
                     "c:\\cfn\\scripts\\users.csv":{
                        "source":"https://s3.amazonaws.com/CFN_WS2012_Scripts/AD/users.csv"
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "a-disable-win-fw":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "a-set-static-ip":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"45"
                     },
                     "b-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe Rename-Computer -NewName ",
                                 {
                                    "Ref":"ADServerNetBIOSName1"
                                 },
                                 " -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "installADDS":{
                  "commands":{
                     "1-install-prereqs":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "2-install-adds":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command ",
                                 "\"Install-ADDSForest -DomainName ",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " ",
                                 "-SafeModeAdministratorPassword (convertto-securestring ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -asplaintext -force) ",
                                 "-DomainMode Win2012 ",
                                 "-DomainNetbiosName ",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 " ",
                                 "-ForestMode Win2012 ",
                                 "-Confirm:$false ",
                                 "-Force\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     },
                     "3-restart-service":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Restart-Service NetLogon -EA 0"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"180"
                     },
                     "4-create-adminuser":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command ",
                                 "\"New-ADUser ",
                                 "-Name ",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 " ",
                                 "-UserPrincipalName ",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "@",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " ",
                                 "-AccountPassword (ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force) ",
                                 "-Enabled $true ",
                                 "-PasswordNeverExpires $true\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "5-update-adminuser":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Add-ADGroupMember 'Domain Admins' -Members ",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     }
                  }
               },
               "configureSites":{
                  "commands":{
                     "a-rename-default-site":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe ",
                                 "\"",
                                 "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName AZ1",
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "b-create-site-2":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe New-ADReplicationSite AZ2"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "c-create-dmzsubnet-1":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                 {
                                    "Ref":"PublicSubnet1CIDR"
                                 },
                                 " -Site AZ1"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "d-create-dmzsubnet-2":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                 {
                                    "Ref":"PublicSubnet2CIDR"
                                 },
                                 " -Site AZ2"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "e-create-subnet-1":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                 {
                                    "Ref":"PrivateSubnet1CIDR"
                                 },
                                 " -Site AZ1"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "f-create-subnet-2":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                 {
                                    "Ref":"PrivateSubnet2CIDR"
                                 },
                                 " -Site AZ2"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "m-set-site-link":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-ADReplicationSiteLink -Filter * | Set-ADReplicationSiteLink -SitesIncluded @{add='AZ2'} -ReplicationFrequencyInMinutes 15\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     }
                  }
               },
               "finalize":{
                  "commands":{
                     "a-signal-success":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e 0 \"",
                                 {
                                    "Ref":"DomainController1WaitHandle"
                                 },
                                 "\""
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },         
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "SubnetId":{
               "Ref":"PrivateSubnet1"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ADServerNetBIOSName1"
                  }
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"60",
                     "VolumeType":"standard"
                  }
               }
            ],
            "SecurityGroupIds":[
               {
                  "Ref":"DomainMemberSecurityGroup"
               },
               {
                  "Ref":"DomainNameSystemSecurityGroup"
               }
            ],
            "PrivateIpAddress":{
               "Ref":"DomainController1PrivateIp"
            },
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r DomainController1",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }            
         }
      },
      "DomainController2":{
         "Type":"AWS::EC2::Instance",
         "DependsOn":"DomainController1WaitCondition",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "join",
                     "addDomainController",
                     "finalize"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.DomainController2.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r DomainController2",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\scripts\\Set-StaticIP.ps1":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "$netip = Get-NetIPConfiguration;",
                                 "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                                 "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                 "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  },
                  "commands":{
                     "a-disable-win-fw":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "a-set-static-ip":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"45"
                     },
                     "b-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe Rename-Computer -NewName ",
                                 {
                                    "Ref":"ADServerNetBIOSName2"
                                 },
                                 " -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "join":{
                  "commands":{
                     "a-join-domain":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Add-Computer -DomainName ",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " -Credential ",
                                 "(New-Object System.Management.Automation.PSCredential('",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 "\\",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "',",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force))) ",
                                 "-Restart\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "addDomainController":{
                  "commands":{
                     "1-install-prereqs":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "2-add-dc":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Install-ADDSDomainController -InstallDns -DomainName ",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " -Credential ",
                                 "(New-Object System.Management.Automation.PSCredential('",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 "\\",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "',",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force))) ",
                                 "-SafeModeAdministratorPassword ",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force) ",
                                 "-Confirm:$false -Force\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "finalize":{
                  "commands":{
                     "a-update-dns-servers-dc2":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "b-update-dns-servers-dc1":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command ",
                                 "\"Invoke-Command -Scriptblock{ ",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 " } -ComputerName ",
                                 {
                                    "Ref":"ADServerNetBIOSName1"
                                 },
                                 " -Credential ",
                                 "(New-Object System.Management.Automation.PSCredential('",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 "\\",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "',",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force))) ",
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"0"
                     },
                     "c-signal-success":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "cfn-signal.exe -e 0 \"",
                                 {
                                    "Ref":"DomainController2WaitHandle"
                                 },
                                 "\""
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         },         
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "SubnetId":{
               "Ref":"PrivateSubnet2"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":{
                     "Ref":"ADServerNetBIOSName2"
                  }
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"60",
                     "VolumeType":"standard"
                  }
               }
            ],
            "SecurityGroupIds":[
               {
                  "Ref":"DomainMemberSecurityGroup"
               },
               {
                  "Ref":"DomainNameSystemSecurityGroup"
               }
            ],
            "PrivateIpAddress":{
               "Ref":"DomainController2PrivateIp"
            },
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r DomainController2",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }            
         }
      },
      "ADFS1":{
         "Type":"AWS::EC2::Instance",
         "DependsOn":"DomainController2WaitCondition",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "join",
                     "adfs"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.ADFS1.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r ADFS1",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "1-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ADFS1 -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "join":{
                  "commands":{
                     "a-set-dns-servers":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     },
                     "b-join-domain":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Add-Computer -DomainName ",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " -Credential ",
                                 "(New-Object System.Management.Automation.PSCredential('",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 "\\",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "',",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force))) ",
                                 "-Restart\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "adfs":{
                  "commands":{
                     "a-install-adfs-federation":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-windowsfeature adfs-federation -IncludeManagementTools\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               }
            }
         },         

         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "SubnetId":{
               "Ref":"PrivateSubnet1"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"ADFS1"
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"40",
                     "VolumeType":"standard"
                  }
               }
            ],
            "SecurityGroupIds":[
               {
                  "Ref":"DomainMemberSecurityGroup"
               },
               {
                  "Ref":"ADFSSecurityGroup"
               }
            ],
            "PrivateIpAddress":{
               "Ref":"ADFS1PrivateIp"
            },                        
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r ADFS1",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }                        
         }
      },
      "ADFS2":{
         "Type":"AWS::EC2::Instance",
         "DependsOn":"DomainController2WaitCondition",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "join",
                     "adfs"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.ADFS2.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r ADFS2",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "1-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName ADFS2 -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "join":{
                  "commands":{
                     "a-set-dns-servers":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     },
                     "b-join-domain":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Add-Computer -DomainName ",
                                 {
                                    "Ref":"DomainDNSName"
                                 },
                                 " -Credential ",
                                 "(New-Object System.Management.Automation.PSCredential('",
                                 {
                                    "Ref":"DomainNetBIOSName"
                                 },
                                 "\\",
                                 {
                                    "Ref":"DomainAdminUser"
                                 },
                                 "',",
                                 "(ConvertTo-SecureString ",
                                 {
                                    "Ref":"DomainAdminPassword"
                                 },
                                 " -AsPlainText -Force))) ",
                                 "-Restart\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "adfs":{
                  "commands":{
                     "a-install-adfs-federation":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-windowsfeature adfs-federation -IncludeManagementTools\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               }
            }
         },         
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "SubnetId":{
               "Ref":"PrivateSubnet2"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"ADFS2"
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"40",
                     "VolumeType":"standard"
                  }
               }
            ],
            "SecurityGroupIds":[
               {
                  "Ref":"DomainMemberSecurityGroup"
               },
               {
                  "Ref":"ADFSSecurityGroup"
               }
            ],
            "PrivateIpAddress":{
               "Ref":"ADFS2PrivateIp"
            },            
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r ADFS2",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }            
         }
      },
      "WAP1":{
         "DependsOn":"ADFS1",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "join",
                     "wap"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.WAP1.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r WAP1",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "1-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName WAP1 -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "join":{
                  "commands":{
                     "a-set-dns-servers":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               },
               "wap":{
                  "commands":{
                     "a-install-wap":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-WindowsFeature Web-Application-Proxy -IncludeManagementTools\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               }
            }
         },                  
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"WAP1"
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"40",
                     "VolumeType":"standard"
                  }
               }
            ],
            "SecurityGroupIds":[
               {
                  "Ref":"RDPSecurityGroup"
               },
               {
                  "Ref":"WebServerSecurityGroup"
               },
               {
                  "Ref":"WAPSecurityGroup"
               }
            ],
            "SubnetId":{
               "Ref":"PublicSubnet1"
            },
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r WAP1",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }            
         }
      },
      "WAP2":{
         "DependsOn":"ADFS1",
         "Metadata":{
            "AWS::CloudFormation::Init":{
               "configSets":{
                  "config":[
                     "setup",
                     "rename",
                     "join",
                     "wap"
                  ]
               },
               "setup":{
                  "files":{
                     "c:\\cfn\\cfn-hup.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[main]\n",
                                 "stack=",
                                 {
                                    "Ref":"AWS::StackName"
                                 },
                                 "\n",
                                 "region=",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     },
                     "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":{
                        "content":{
                           "Fn::Join":[
                              "",
                              [
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.WAP2.Metadata.AWS::CloudFormation::Init\n",
                                 "action=cfn-init.exe -v -c config -s ",
                                 {
                                    "Ref":"AWS::StackId"
                                 },
                                 " -r WAP2",
                                 " --region ",
                                 {
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{
                     "windows":{
                        "cfn-hup":{
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[
                              "c:\\cfn\\cfn-hup.conf",
                              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "rename":{
                  "commands":{
                     "1-execute-powershell-script-RenameComputer":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command Rename-Computer -NewName WAP2 -Restart"
                              ]
                           ]
                        },
                        "waitAfterCompletion":"forever"
                     }
                  }
               },
               "join":{
                  "commands":{
                     "a-set-dns-servers":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"",
                                 "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses ",
                                 {
                                    "Ref":"DomainController1PrivateIp"
                                 },
                                 ",",
                                 {
                                    "Ref":"DomainController2PrivateIp"
                                 },
                                 "\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               },               
               "wap":{
                  "commands":{
                     "a-install-wap":{
                        "command":{
                           "Fn::Join":[
                              "",
                              [
                                 "powershell.exe -Command \"Install-WindowsFeature Web-Application-Proxy -IncludeManagementTools\""
                              ]
                           ]
                        },
                        "waitAfterCompletion":"30"
                     }
                  }
               }
            }
         },                           
         "Type":"AWS::EC2::Instance",
         "Properties":{
            "ImageId":{
               "Fn::FindInMap":[
                  "WindowsAMI",
                  {
                     "Ref":"AWS::Region"
                  },
                  {
                     "Fn::FindInMap":[
                        "InstanceArchitecture",
                        {
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType":{
               "Ref":"InstanceType"
            },
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"WAP2"
               }
            ],
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "VolumeSize":"40",
                     "VolumeType":"standard"
                  }
               }
            ],
            "KeyName":{
               "Ref":"KeyPairName"
            },
            "SecurityGroupIds":[
               {
                  "Ref":"RDPSecurityGroup"
               },
               {
                  "Ref":"WebServerSecurityGroup"
               },
               {
                  "Ref":"WAPSecurityGroup"
               }
            ],
            "SubnetId":{
               "Ref":"PublicSubnet2"
            },
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -c config -s ",
                        {
                           "Ref":"AWS::StackId"
                        },
                        " -r WAP2",
                        " --region ",
                        {
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "</script>\n"
                     ]
                  ]
               }
            }            
         }
      },
      "DomainController1WaitCondition":{
         "Type":"AWS::CloudFormation::WaitCondition",
         "DependsOn":"DomainController1",
         "Properties":{
            "Handle":{
               "Ref":"DomainController1WaitHandle"
            },
            "Timeout":"3600"
         }
      },
      "DomainController1WaitHandle":{
         "Type":"AWS::CloudFormation::WaitConditionHandle"
      },
      "DomainController2WaitCondition":{
         "Type":"AWS::CloudFormation::WaitCondition",
         "DependsOn":"DomainController2",
         "Properties":{
            "Handle":{
               "Ref":"DomainController2WaitHandle"
            },
            "Timeout":"3600"
         }
      },
      "DomainController2WaitHandle":{
         "Type":"AWS::CloudFormation::WaitConditionHandle"
      },
      "WebServerSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Web Server"
               }
            ],
            "GroupDescription":"Enable HTTP and HTTPS access from the Internet",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"80",
                  "ToPort":"80",
                  "CidrIp":"0.0.0.0/0"
               },
               {
                  "IpProtocol":"tcp",
                  "FromPort":"443",
                  "ToPort":"443",
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
      "RDPSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"RDP"
               }
            ],
            "GroupDescription":"Enable RDP access from the Internet",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"3389",
                  "ToPort":"3389",
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
      "SSHSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"SSH"
               }
            ],
            "GroupDescription":"Enable SSH access from the Internet",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      },
      "WAPSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Web Application Proxy"
               }
            ],
            "GroupDescription":"Security Group for WAP Server",
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "NATSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Network Address Translation"
               }
            ],
            "GroupDescription":"Enable access from Private Subnets",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"-1",
                  "FromPort":"1",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"PrivateSubnet1CIDR"
                  }
               },
               {
                  "IpProtocol":"-1",
                  "FromPort":"1",
                  "ToPort":"65535",
                  "CidrIp":{
                     "Ref":"PrivateSubnet2CIDR"
                  }
               }
            ]
         }
      },

      "DomainNameSystemSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Domain Name System"
               }
            ],
            "GroupDescription":"Enable access from Public Subnets",
            "VpcId":{
               "Ref":"VPC"
            },
            "SecurityGroupIngress":[
               {
                  "IpProtocol":"udp",
                  "FromPort":"53",
                  "ToPort":"53",
                  "CidrIp":{
                     "Ref":"PublicSubnet1CIDR"
                  }
               },
               {
                  "IpProtocol":"udp",
                  "FromPort":"53",
                  "ToPort":"53",
                  "CidrIp":{
                     "Ref":"PublicSubnet2CIDR"
                  }
               }
            ]
         }
      },

      "ADFSSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Active Directory Federated Services"
               }
            ],
            "GroupDescription":"Enable access from the WAP Security Group",
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "ADFSSecurityGroupIngress1":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "Properties":{
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "SourceSecurityGroupId":{
               "Fn::GetAtt":[
                  "WAPSecurityGroup",
                  "GroupId"
               ]
            },
            "GroupId":{
               "Fn::GetAtt":[
                  "ADFSSecurityGroup",
                  "GroupId"
               ]
            }
         }
      },
      "ADFSSecurityGroupIngress2":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "Properties":{
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "SourceSecurityGroupId":{
               "Fn::GetAtt":[
                  "WAPSecurityGroup",
                  "GroupId"
               ]
            },
            "GroupId":{
               "Fn::GetAtt":[
                  "ADFSSecurityGroup",
                  "GroupId"
               ]
            }
         }
      },
      "DomainMemberSecurityGroup":{
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{
            "Tags":[
               {
                  "Key":"Name",
                  "Value":"Domain Member"
               }
            ],
            "GroupDescription":"Allows ",
            "VpcId":{
               "Ref":"VPC"
            }
         }
      },
      "DomainMemberSecurityGroupIngress":{
         "Type":"AWS::EC2::SecurityGroupIngress",
         "Properties":{
            "IpProtocol":"-1",
            "FromPort":"1",
            "ToPort":"65535",
            "SourceSecurityGroupId":{
               "Fn::GetAtt":[
                  "DomainMemberSecurityGroup",
                  "GroupId"
               ]
            },
            "GroupId":{
               "Fn::GetAtt":[
                  "DomainMemberSecurityGroup",
                  "GroupId"
               ]
            }
         }
      }
   },
   "Outputs":{
      "WAP1ElasticIP":{
         "Value":{
            "Ref":"WAP1EIP"
         },
         "Description":"Elastic IP address of the first Web Application Proxy (WAP1) in AZ1"
      },
      "WAP2ElasticIP":{
         "Value":{
            "Ref":"WAP2EIP"
         },
         "Description":"Elastic IP address of the second Web Application Proxy (WAP2) in AZ2"
      },
      "DomainAdmin":{
         "Value":{
            "Fn::Join":[
               "",
               [
                  {
                     "Ref":"DomainNetBIOSName"
                  },
                  "\\StackAdmin"
               ]
            ]
         },
         "Description":"Domain administrator account"
      },
      "VPC":{
         "Value":{
            "Ref":"VPC"
         },
         "Description":"VPC ID"
      },
      "VPCCIDR":{
         "Value":{
            "Ref":"VPCCIDR"
         },
         "Description":"VPC CIDR"
      },
      "AD1SubnetId":{
         "Value":{
            "Ref":"PrivateSubnet1"
         },
         "Description":"Subnet ID for the AD Domain Controller tier in AZ1"
      },
      "AD2SubnetId":{
         "Value":{
            "Ref":"PrivateSubnet2"
         },
         "Description":"Subnet ID for the AD Domain Controller tier in AZ2"
      }
   }
}